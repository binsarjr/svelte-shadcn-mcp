{"question": "How does theming work in shadcn-svelte?", "answer": "shadcn-svelte theming is based on CSS custom properties (variables):\n\n1. **Color System**: Uses HSL color space for better manipulation\n2. **CSS Variables**: Defined in `:root` and `[data-theme=\"dark\"]` selectors\n3. **Automatic Dark Mode**: Supports system preference detection\n4. **Semantic Colors**: Uses semantic naming (primary, secondary, accent, etc.)\n\nCore theme variables:\n```css\n:root {\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n  --primary: 222.2 47.4% 11.2%;\n  --primary-foreground: 210 40% 98%;\n  --secondary: 210 40% 96%;\n  --secondary-foreground: 222.2 84% 4.9%;\n}\n```", "category": "theming", "tags": ["colors", "css-variables", "dark-mode", "design-tokens"]}
{"question": "How do I implement dark mode in shadcn-svelte?", "answer": "Dark mode implementation in shadcn-svelte:\n\n1. **Automatic Setup**: Dark mode CSS variables are included by default\n2. **Theme Switching**: Use `data-theme` attribute or class-based approach\n3. **System Detection**: Supports `prefers-color-scheme` media query\n\nImplementation example:\n```svelte\n<script>\n  import { browser } from '$app/environment';\n  import { writable } from 'svelte/store';\n  \n  const theme = writable('system');\n  \n  function toggleTheme() {\n    theme.update(t => t === 'dark' ? 'light' : 'dark');\n  }\n  \n  $: if (browser) {\n    document.documentElement.setAttribute('data-theme', $theme);\n  }\n</script>\n\n<button on:click={toggleTheme}>Toggle Theme</button>\n```", "category": "theming", "tags": ["dark-mode", "theme-switching", "system-preference", "implementation"]}
{"question": "Can I create custom color schemes with shadcn-svelte?", "answer": "Yes, you can create custom color schemes by defining your own CSS variables:\n\n1. **Define Custom Variables**: Add new color variables to your CSS\n2. **Extend Theme**: Create additional theme variants\n3. **Component Integration**: Components automatically use defined variables\n\nCustom theme example:\n```css\n[data-theme=\"custom\"] {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  --primary: 142 76% 36%;\n  --primary-foreground: 355.7 100% 97.3%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 0 0% 98%;\n  --accent: 12 76% 61%;\n  --accent-foreground: 24 9.8% 10%;\n}\n```\n\nComponents will automatically adapt to your custom color scheme.", "category": "theming", "tags": ["custom-themes", "color-schemes", "css-variables", "branding"]}
{"question": "How do I configure theme colors and design tokens?", "answer": "Configure theme colors and design tokens in shadcn-svelte:\n\n1. **Global CSS File**: Define variables in your main stylesheet\n2. **Tailwind Config**: Extend Tailwind with your color system\n3. **Component Tokens**: Use semantic naming for consistency\n\nConfiguration example:\n```css\n/* app.css */\n:root {\n  /* Base colors */\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n  \n  /* Brand colors */\n  --primary: 221.2 83.2% 53.3%;\n  --primary-foreground: 210 40% 98%;\n  \n  /* Semantic colors */\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 210 40% 98%;\n  \n  /* Component tokens */\n  --radius: 0.5rem;\n  --border: 214.3 31.8% 91.4%;\n}\n```", "category": "theming", "tags": ["design-tokens", "configuration", "color-system", "semantic-colors"]}