{"question": "How do I use the Button component?", "answer": "The Button component is a versatile element that supports various styles and states:\n\n**Basic usage**:\n```svelte\n<script>\n  import { Button } from '$lib/components/ui/button';\n</script>\n\n<Button>Click me</Button>\n```\n\n**With variants**:\n```svelte\n<Button variant=\"destructive\">Delete</Button>\n<Button variant=\"outline\">Cancel</Button>\n<Button variant=\"ghost\">Link</Button>\n```\n\n**With sizes**:\n```svelte\n<Button size=\"sm\">Small</Button>\n<Button size=\"lg\">Large</Button>\n<Button size=\"icon\">ðŸŽ¨</Button>\n```\n\n**Disabled state**:\n```svelte\n<Button disabled>Cannot click</Button>\n```", "category": "components", "tags": ["button", "variants", "usage", "props"]}
{"question": "How do I create forms with shadcn-svelte?", "answer": "shadcn-svelte provides a complete set of form components:\n\n**Basic form structure**:\n```svelte\n<script>\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Label } from '$lib/components/ui/label';\n  \n  let email = '';\n</script>\n\n<form on:submit|preventDefault>\n  <div>\n    <Label for=\"email\">Email</Label>\n    <Input \n      id=\"email\" \n      type=\"email\" \n      bind:value={email}\n      placeholder=\"Enter your email\"\n    />\n  </div>\n  <Button type=\"submit\">Submit</Button>\n</form>\n```\n\n**Available form components**:\n- Input: Text, email, password, number inputs\n- Textarea: Multi-line text input\n- Select: Dropdown selection\n- Checkbox: Toggle options\n- Radio Group: Single selection from multiple options\n- Switch: On/off toggle", "category": "forms", "tags": ["form", "input", "label", "validation", "submission"]}
{"question": "How do I use the Card component for layout?", "answer": "The Card component is perfect for creating content sections with headers and footers:\n\n**Basic card structure**:\n```svelte\n<script>\n  import { Card, Button } from '$lib/components/ui';\n</script>\n\n<Card.Root>\n  <Card.Header>\n    <Card.Title>User Profile</Card.Title>\n    <Card.Description>Manage your account settings</Card.Description>\n  </Card.Header>\n  <Card.Content>\n    <p>Card content goes here...</p>\n  </Card.Content>\n  <Card.Footer>\n    <Button variant=\"outline\">Cancel</Button>\n    <Button>Save Changes</Button>\n  </Card.Footer>\n</Card.Root>\n```\n\n**Nested cards**:\n```svelte\n<Card.Root>\n  <Card.Header>\n    <Card.Title>Dashboard</Card.Title>\n  </Card.Header>\n  <Card.Content class=\"space-y-4\">\n    <Card>\n      <Card.Header>\n        <Card.Title>Statistics</Card.Title>\n      </Card.Header>\n      <Card.Content>\n        <p>Your usage statistics...</p>\n      </Card.Content>\n    </Card>\n  </Card.Content>\n</Card.Root>\n```", "category": "layout", "tags": ["card", "layout", "header", "footer", "content"]}
{"question": "How do I implement modal dialogs?", "answer": "Use the Dialog component for modal dialogs and popups:\n\n**Basic dialog**:\n```svelte\n<script>\n  import { Dialog, Button } from '$lib/components/ui';\n  let dialogOpen = false;\n</script>\n\n<!-- Trigger button -->\n<Button on:click={() => dialogOpen = true}>Open Dialog</Button>\n\n<!-- Dialog component -->\n<Dialog.Root bind:open={dialogOpen}>\n  <Dialog.Content>\n    <Dialog.Header>\n      <Dialog.Title>Confirm Action</Dialog.Title>\n      <Dialog.Description>\n        Are you sure you want to delete this item?\n      </Dialog.Description>\n    </Dialog.Header>\n    <Dialog.Footer>\n      <Button variant=\"outline\" on:click={() => dialogOpen = false}>\n        Cancel\n      </Button>\n      <Button variant=\"destructive\" on:click={() => {\n        // Handle delete\n        dialogOpen = false;\n      }}>\n        Delete\n      </Button>\n    </Dialog.Footer>\n  </Dialog.Content>\n</Dialog.Root>\n```\n\n**Dialog features**:\n- **Backdrop**: Automatically adds overlay\n- **Focus trap**: Keeps focus within dialog\n- **Keyboard navigation**: ESC to close\n- **Accessibility**: Proper ARIA attributes", "category": "overlay", "tags": ["dialog", "modal", "popup", "accessibility"]}
{"question": "How do I create navigation with shadcn-svelte?", "answer": "shadcn-svelte provides several navigation components:\n\n**Tabs navigation**:\n```svelte\n<script>\n  import { Tabs } from '$lib/components/ui/tabs';\n  let activeTab = 'account';\n</script>\n\n<Tabs.Root bind:value={activeTab}>\n  <Tabs.List>\n    <Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n    <Tabs.Trigger value=\"password\">Password</Tabs.Trigger>\n    <Tabs.Trigger value=\"notifications\">Notifications</Tabs.Trigger>\n  </Tabs.List>\n  <Tabs.Content value=\"account\">\n    <h3>Account Settings</h3>\n    <!-- Account form -->\n  </Tabs.Content>\n  <Tabs.Content value=\"password\">\n    <h3>Change Password</h3>\n    <!-- Password form -->\n  </Tabs.Content>\n</Tabs.Root>\n```\n\n**Navigation menu**:\n```svelte\n<script>\n  import { NavigationMenu } from '$lib/components/ui/navigation-menu';\n</script>\n\n<NavigationMenu.Root>\n  <NavigationMenu.List>\n    <NavigationMenu.Item>\n      <NavigationMenu.Trigger>Products</NavigationMenu.Trigger>\n      <NavigationMenu.Content>\n        <!-- Dropdown content -->\n      </NavigationMenu.Content>\n    </NavigationMenu.Item>\n  </NavigationMenu.List>\n</NavigationMenu.Root>\n```", "category": "navigation", "tags": ["tabs", "navigation", "menu", "routing"]}
{"question": "How do I display data tables?", "answer": "Use the Table component for displaying structured data:\n\n**Basic table**:\n```svelte\n<script>\n  import { Table } from '$lib/components/ui/table';\n  \n  const users = [\n    { id: 1, name: 'John Doe', email: 'john@example.com', role: 'Admin' },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\n  ];\n</script>\n\n<Table.Root>\n  <Table.Header>\n    <Table.Row>\n      <Table.Head>Name</Table.Head>\n      <Table.Head>Email</Table.Head>\n      <Table.Head>Role</Table.Head>\n      <Table.Head class=\"text-right\">Actions</Table.Head>\n    </Table.Row>\n  </Table.Header>\n  <Table.Body>\n    {#each users as user}\n      <Table.Row>\n        <Table.Cell>{user.name}</Table.Cell>\n        <Table.Cell>{user.email}</Table.Cell>\n        <Table.Cell>{user.role}</Table.Cell>\n        <Table.Cell class=\"text-right\">\n          <Button variant=\"outline\" size=\"sm\">Edit</Button>\n        </Table.Cell>\n      </Table.Row>\n    {/each}\n  </Table.Body>\n</Table.Root>\n```\n\n**Table features**:\n- **Responsive**: Works on mobile devices\n- **Sortable**: Can be extended with sorting functionality\n- **Accessible**: Proper table semantics\n- **Customizable**: Style with Tailwind classes", "category": "data-display", "tags": ["table", "data", "grid", "responsive"]}
{"question": "How do I show alerts and notifications?", "answer": "Use Alert and Toast components for user notifications:\n\n**Alert components**:\n```svelte\n<script>\n  import { Alert, AlertCircle } from '$lib/components/ui';\n</script>\n\n<!-- Success alert -->\n<Alert.Root>\n  <Alert.Icon>\n    <CheckCircle class=\"h-4 w-4\" />\n  </Alert.Icon>\n  <Alert.Title>Success</Alert.Title>\n  <Alert.Description>\n    Your changes have been saved successfully.\n  </Alert.Description>\n</Alert.Root>\n\n<!-- Error alert -->\n<Alert.Root variant=\"destructive\">\n  <Alert.Icon>\n    <AlertCircle class=\"h-4 w-4\" />\n  </Alert.Icon>\n  <Alert.Title>Error</Alert.Title>\n  <Alert.Description>\n    Something went wrong. Please try again.\n  </Alert.Description>\n</Alert.Root>\n```\n\n**Toast notifications**:\n```svelte\n<script>\n  import { toast } from '$lib/components/ui/toast';\n  \n  function showToast() {\n    toast({\n      title: 'Success',\n      description: 'Profile updated successfully',\n      variant: 'default'\n    });\n  }\n</script>\n\n<Button on:click={showToast}>Show Toast</Button>\n```", "category": "feedback", "tags": ["alert", "toast", "notification", "feedback"]}