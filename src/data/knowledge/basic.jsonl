{"question": "What is shadcn-svelte?", "answer": "shadcn-svelte is a component library built specifically for Svelte and SvelteKit applications. It provides a collection of accessible, reusable, and customizable UI components that follow modern design system principles. Unlike traditional component libraries, shadcn-svelte gives you full ownership of your components with no vendor lock-in.", "category": "basic", "tags": ["introduction", "overview", "components"]}
{"question": "How do I install shadcn-svelte in my project?", "answer": "To install shadcn-svelte, run the following command in your SvelteKit project:\n\n1. Initialize your project: `npx shadcn-svelte@latest init`\n2. Follow the interactive setup to configure Tailwind CSS and other dependencies\n3. Add components as needed: `npx shadcn-svelte@latest add button`\n\nThe init command will automatically set up Tailwind CSS, CSS variables, and necessary configuration files.", "category": "installation", "tags": ["setup", "init", "tailwind", "configuration"]}
{"question": "What are the system requirements for shadcn-svelte?", "answer": "shadcn-svelte requires:\n- Node.js 18.x or later\n- SvelteKit project (recommended)\n- Tailwind CSS v3.x\n- A package manager (npm, yarn, pnpm, or bun)\n\nThe library is designed to work with modern Svelte applications and follows Svelte's best practices.", "category": "prerequisites", "tags": ["requirements", "nodejs", "sveltekit", "tailwind"]}
{"question": "How do I add a new component to my project?", "answer": "To add a new component, use the CLI command:\n\n```bash\nnpx shadcn-svelte@latest add [component-name]\n```\n\nFor example:\n```bash\nnpx shadcn-svelte@latest add button\nnpx shadcn-svelte@latest add card\nnpx shadcn-svelte@latest add dialog\n```\n\nThis will copy the component files to your project and install any required dependencies.", "category": "components", "tags": ["cli", "add-component", "installation"]}
{"question": "What is the difference between shadcn-svelte and other component libraries?", "answer": "shadcn-svelte differs from traditional component libraries in several key ways:\n\n1. **Full ownership**: Components are copied to your codebase, giving you complete control\n2. **No lock-in**: You can customize components without breaking updates\n3. **Tailwind-first**: Built with Tailwind CSS for consistent theming\n4. **Accessibility-first**: All components follow WCAG guidelines\n5. **Svelte-native**: Designed specifically for Svelte's reactive nature\n\nUnlike libraries that provide components as npm packages, shadcn-svelte gives you the source code directly.", "category": "comparison", "tags": ["advantages", "ownership", "customization", "tailwind"]}
{"question": "How do I customize component styles in shadcn-svelte?", "answer": "There are several ways to customize shadcn-svelte components:\n\n1. **CSS Variables**: Override theme variables in your CSS\n2. **Tailwind Config**: Extend your tailwind.config.js\n3. **Component Props**: Use variant and class props\n4. **Direct modification**: Edit the component files directly\n\nExample using CSS variables:\n```css\n:root {\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n  /* more variables */\n}\n```", "category": "styling", "tags": ["customization", "css-variables", "tailwind", "theming"]}
{"question": "What accessibility features does shadcn-svelte provide?", "answer": "shadcn-svelte components include comprehensive accessibility features:\n\n- **ARIA attributes**: Proper roles and attributes for screen readers\n- **Keyboard navigation**: Full keyboard support with logical tab order\n- **Focus management**: Proper focus states and traps for modals\n- **Color contrast**: WCAG-compliant color combinations\n- **Semantic HTML**: Correct HTML elements for accessibility\n- **Screen reader support**: Compatible with popular screen readers\n\nAll components are tested with accessibility tools to ensure compliance.", "category": "accessibility", "tags": ["a11y", "wcag", "keyboard", "screen-reader"]}
{"question": "How do I implement dark mode with shadcn-svelte?", "answer": "shadcn-svelte supports dark mode through CSS variables and class-based theming:\n\n1. **Add dark variant to tailwind.config.js**:\n```js\ndarkMode: ['class']\n```\n\n2. **Use the theme script** in your layout:\n```svelte\n<script>\n  import { theme } from '$lib/utils/theme';\n</script>\n```\n\n3. **Toggle theme**:\n```svelte\n<button on:click={() => theme.set('dark')}>Dark Mode</button>\n```\n\nComponents automatically adapt to the current theme.", "category": "theming", "tags": ["dark-mode", "theme", "css-variables", "tailwind"]}
{"question": "What are component variants in shadcn-svelte?", "answer": "Component variants are different styling options that can be applied to components. They are implemented using the `class-variance-authority` (cva) library, which provides a type-safe way to define and manage component variations.\n\nExample variants for a Button:\n- **default**: Primary button style\n- **destructive**: Danger/error actions\n- **outline**: Bordered button style\n- **secondary**: Less prominent actions\n- **ghost**: No background, only text\n- **link**: Link-style button\n\nVariants can be combined with sizes and other properties.", "category": "components", "tags": ["variants", "cva", "styling", "types"]}
{"question": "How do I use shadcn-svelte with SvelteKit?", "answer": "shadcn-svelte is designed to work seamlessly with SvelteKit:\n\n1. **Install in SvelteKit project**: Use the init command\n2. **Layout integration**: Add components to your +layout.svelte\n3. **Route components**: Use components in individual routes\n4. **Shared components**: Place components in src/lib/components/\n5. **Load in routes**: Import and use components as needed\n\nExample in a SvelteKit route:\n```svelte\n<script>\n  import { Button } from '$lib/components/ui/button';\n</script>\n\n<Button>Click me</Button>\n```", "category": "sveltekit", "tags": ["integration", "routes", "layout", "components"]}