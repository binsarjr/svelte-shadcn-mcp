{"question": "How do I create custom component variants?", "answer": "Creating custom variants in shadcn-svelte involves using the class-variance-authority (cva) library:\n\n**1. Create a variant configuration**:\n```typescript\n// lib/components/ui/button/variants.ts\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nexport const buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        // Custom variant\n        success: 'bg-green-600 text-white hover:bg-green-700',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport type ButtonVariants = VariantProps<typeof buttonVariants>;\n```\n\n**2. Use in component**:\n```svelte\n<script lang=\"ts\">\n  import { cn } from '$lib/utils';\n  import { buttonVariants, type ButtonVariants } from './variants';\n  \n  interface Props {\n    variant?: ButtonVariants['variant'];\n    size?: ButtonVariants['size'];\n    class?: string;\n  }\n  \n  let { variant = 'default', size = 'default', class: className, ...restProps }: Props = $props();\n</script>\n\n<button \n  class={cn(buttonVariants({ variant, size }), className)}\n  {...restProps}\n>\n  <slot />\n</button>\n```", "category": "advanced", "tags": ["variants", "cva", "customization", "typescript"]}
{"question": "How do I implement compound components?", "answer": "Compound components in shadcn-svelte allow you to create complex components with multiple related parts:\n\n**1. Create the main component structure**:\n```svelte\n<!-- lib/components/ui/navigation-menu/NavigationMenu.svelte -->\n<script lang=\"ts\">\n  import { cn } from '$lib/utils';\n  \n  interface Props {\n    class?: string;\n  }\n  \n  let { class: className, ...restProps }: Props = $props();\n</script>\n\n<nav class={cn('relative flex w-full items-center justify-between', className)} {...restProps}>\n  <slot />\n</nav>\n```\n\n**2. Create sub-components**:\n```svelte\n<!-- lib/components/ui/navigation-menu/NavigationMenuList.svelte -->\n<script lang=\"ts\">\n  import { cn } from '$lib/utils';\n  \n  interface Props {\n    class?: string;\n  }\n  \n  let { class: className, ...restProps }: Props = $props();\n</script>\n\n<ul class={cn('group flex flex-1 list-none items-center justify-center space-x-1', className)} {...restProps}>\n  <slot />\n</ul>\n```\n\n**3. Create index file for exports**:\n```typescript\n// lib/components/ui/navigation-menu/index.ts\nexport { default as NavigationMenu } from './NavigationMenu.svelte';\nexport { default as NavigationMenuList } from './NavigationMenuList.svelte';\nexport { default as NavigationMenuItem } from './NavigationMenuItem.svelte';\nexport { default as NavigationMenuTrigger } from './NavigationMenuTrigger.svelte';\nexport { default as NavigationMenuContent } from './NavigationMenuContent.svelte';\n```\n\n**4. Usage**:\n```svelte\n<script>\n  import { NavigationMenu, NavigationMenuList, NavigationMenuItem, NavigationMenuTrigger, NavigationMenuContent } from '$lib/components/ui/navigation-menu';\n</script>\n\n<NavigationMenu>\n  <NavigationMenuList>\n    <NavigationMenuItem>\n      <NavigationMenuTrigger>Products</NavigationMenuTrigger>\n      <NavigationMenuContent>\n        <!-- Dropdown content -->\n      </NavigationMenuContent>\n    </NavigationMenuItem>\n  </NavigationMenuList>\n</NavigationMenu>\n```", "category": "advanced", "tags": ["compound-components", "architecture", "patterns", "structure"]}
{"question": "How do I handle form validation with shadcn-svelte?", "answer": "Form validation can be implemented using various approaches with shadcn-svelte components:\n\n**1. Basic validation with Svelte reactivity**:\n```svelte\n<script>\n  import { Button, Input, Label } from '$lib/components/ui';\n  \n  let form = {\n    email: '',\n    password: ''\n  };\n  \n  let errors = {};\n  \n  function validateForm() {\n    errors = {};\n    \n    if (!form.email) {\n      errors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) {\n      errors.email = 'Please enter a valid email';\n    }\n    \n    if (!form.password) {\n      errors.password = 'Password is required';\n    } else if (form.password.length < 8) {\n      errors.password = 'Password must be at least 8 characters';\n    }\n    \n    return Object.keys(errors).length === 0;\n  }\n  \n  async function handleSubmit() {\n    if (!validateForm()) return;\n    \n    // Submit form\n    console.log('Form submitted:', form);\n  }\n</script>\n\n<form on:submit|preventDefault={handleSubmit}>\n  <div class=\"space-y-2\">\n    <Label for=\"email\">Email</Label>\n    <Input \n      id=\"email\" \n      type=\"email\" \n      bind:value={form.email}\n      class={errors.email ? 'border-destructive' : ''}\n    />\n    {#if errors.email}\n      <p class=\"text-sm text-destructive\">{errors.email}</p>\n    {/if}\n  </div>\n  \n  <div class=\"space-y-2\">\n    <Label for=\"password\">Password</Label>\n    <Input \n      id=\"password\" \n      type=\"password\" \n      bind:value={form.password}\n      class={errors.password ? 'border-destructive' : ''}\n    />\n    {#if errors.password}\n      <p class=\"text-sm text-destructive\">{errors.password}</p>\n    {/if}\n  </div>\n  \n  <Button type=\"submit\">Submit</Button>\n</form>\n```\n\n**2. Using validation libraries**:\n```typescript\n// Using Zod for validation\nimport { z } from 'zod';\n\nconst formSchema = z.object({\n  email: z.string().email('Please enter a valid email'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nfunction validateForm(data: FormData) {\n  const result = formSchema.safeParse(data);\n  return result;\n}\n```", "category": "forms", "tags": ["validation", "forms", "zod", "error-handling"]}
{"question": "How do I optimize shadcn-svelte component performance?", "answer": "Performance optimization for shadcn-svelte components involves several strategies:\n\n**1. Component optimization**:\n```svelte\n<!-- Use $bind: for efficient two-way binding -->\n<Input bind:value={email} />\n\n<!-- Avoid unnecessary re-renders with Reactivity -->\n{#key expensiveValue}\n  <ExpensiveComponent value={expensiveValue} />\n{/key}\n\n<!-- Use $: for derived values -->\n$: filteredItems = items.filter(item => item.active);\n```\n\n**2. Bundle optimization**:\n```javascript\n// svelte.config.js\nexport default {\n  compilerOptions: {\n    // Enable for production builds\n    dev: false,\n    // Generate smaller code\n    generate: 'dom',\n    // Enable hydratable components\n    hydratable: true\n  }\n};\n```\n\n**3. CSS optimization**:\n```css\n/* Use Tailwind's purge for unused styles */\n/* tailwind.config.js */\nmodule.exports = {\n  content: [\n    './src/**/*.{html,js,svelte,ts}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n**4. Lazy loading components**:\n```svelte\n<script>\n  import { onMount } from 'svelte';\n  let HeavyComponent;\n  \n  onMount(async () => {\n    HeavyComponent = (await import('./HeavyComponent.svelte')).default;\n  });\n</script>\n\n{#if HeavyComponent}\n  <HeavyComponent />\n{/if}\n```\n\n**5. Memoization**:\n```typescript\n// Use Svelte's $: for computed values\n$: expensiveCalculation = computeExpensiveValue(data);\n\n// Use debounce for user input\nimport { debounce } from '$lib/utils/debounce';\n\nfunction handleInput(e) {\n  debouncedSearch(e.target.value);\n}\n```", "category": "performance", "tags": ["optimization", "performance", "bundle", "reactivity"]}
{"question": "How do I create responsive layouts with shadcn-svelte?", "answer": "Creating responsive layouts with shadcn-svelte involves using Tailwind CSS breakpoints and smart component composition:\n\n**1. Grid layouts with Card components**:\n```svelte\n<script>\n  import { Card } from '$lib/components/ui/card';\n  \n  const items = [\n    { title: 'Analytics', description: 'View your analytics' },\n    { title: 'Settings', description: 'Manage settings' },\n    { title: 'Reports', description: 'Generate reports' },\n  ];\n</script>\n\n<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n  {#each items as item}\n    <Card>\n      <Card.Header>\n        <Card.Title>{item.title}</Card.Title>\n        <Card.Description>{item.description}</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <p>Content goes here...</p>\n      </Card.Content>\n    </Card>\n  {/each}\n</div>\n```\n\n**2. Responsive navigation**:\n```svelte\n<script>\n  import { Button } from '$lib/components/ui/button';\n  import { Sheet, SheetContent, SheetTrigger } from '$lib/components/ui/sheet';\n  import { Menu } from 'lucide-svelte';\n  \n  let mobileMenuOpen = false;\n</script>\n\n<!-- Desktop navigation -->\n<nav class=\"hidden md:flex space-x-4\">\n  <a href=\"/\" class=\"text-foreground hover:text-primary\">Home</a>\n  <a href=\"/about\" class=\"text-foreground hover:text-primary\">About</a>\n  <a href=\"/contact\" class=\"text-foreground hover:text-primary\">Contact</a>\n</nav>\n\n<!-- Mobile navigation -->\n<Sheet bind:open={mobileMenuOpen}>\n  <SheetTrigger asChild class=\"md:hidden\">\n    <Button variant=\"ghost\" size=\"icon\">\n      <Menu class=\"h-6 w-6\" />\n    </Button>\n  </SheetTrigger>\n  <SheetContent side=\"right\">\n    <nav class=\"flex flex-col space-y-4 mt-4\">\n      <a href=\"/\" class=\"text-foreground hover:text-primary\">Home</a>\n      <a href=\"/about\" class=\"text-foreground hover:text-primary\">About</a>\n      <a href=\"/contact\" class=\"text-foreground hover:text-primary\">Contact</a>\n    </nav>\n  </SheetContent>\n</Sheet>\n```\n\n**3. Responsive forms**:\n```svelte\n<div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n  <div class=\"space-y-2\">\n    <Label for=\"firstName\">First Name</Label>\n    <Input id=\"firstName\" placeholder=\"John\" />\n  </div>\n  <div class=\"space-y-2\">\n    <Label for=\"lastName\">Last Name</Label>\n    <Input id=\"lastName\" placeholder=\"Doe\" />\n  </div>\n</div>\n\n<!-- Full width on mobile, half on desktop -->\n<div class=\"sm:col-span-2\">\n  <Label for=\"email\">Email</Label>\n  <Input id=\"email\" type=\"email\" placeholder=\"john@example.com\" />\n</div>\n```", "category": "layout", "tags": ["responsive", "grid", "breakpoints", "mobile"]}
{"question": "How do I implement internationalization (i18n) with shadcn-svelte?", "answer": "Implementing internationalization with shadcn-svelte components:\n\n**1. Setup i18n library**:\n```bash\nnpm install svelte-i18n\n```\n\n**2. Configure i18n**:\n```typescript\n// src/lib/i18n.ts\nimport { init, register } from 'svelte-i18n';\n\nconst defaultLocale = 'en';\n\nregister('en', () => import('./locales/en.json'));\nregister('es', () => import('./locales/es.json'));\n\ninit({\n  fallbackLocale: defaultLocale,\n  initialLocale: defaultLocale,\n});\n```\n\n**3. Create translation files**:\n```json\n// src/lib/locales/en.json\n{\n  \"components\": {\n    \"button\": {\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\",\n      \"delete\": \"Delete\"\n    },\n    \"form\": {\n      \"email\": \"Email\",\n      \"password\": \"Password\",\n      \"submit\": \"Submit\"\n    }\n  }\n}\n```\n\n**4. Use in components**:\n```svelte\n<script>\n  import { _ } from 'svelte-i18n';\n  import { Button, Input, Label } from '$lib/components/ui';\n  \n  let email = '';\n</script>\n\n<form>\n  <div>\n    <Label for=\"email\">{$_('components.form.email')}</Label>\n    <Input \n      id=\"email\" \n      type=\"email\" \n      bind:value={email}\n      placeholder={$_('components.form.email')}\n    />\n  </div>\n  <div class=\"flex gap-2\">\n    <Button type=\"submit\">{$_('components.button.save')}</Button>\n    <Button variant=\"outline\">{$_('components.button.cancel')}</Button>\n  </div>\n</form>\n```\n\n**5. Language switcher**:\n```svelte\n<script>\n  import { locale, locales } from 'svelte-i18n';\n  \n  function changeLanguage(lang) {\n    locale.set(lang);\n  }\n</script>\n\n<div class=\"flex gap-2\">\n  {#each Object.entries(locales) as [lang, name]}\n    <Button \n      variant={$locale === lang ? 'default' : 'outline'}\n      size=\"sm\"\n      on:click={() => changeLanguage(lang)}\n    >\n      {name}\n    </Button>\n  {/each}\n</div>\n```", "category": "advanced", "tags": ["i18n", "internationalization", "localization", "translations"]}