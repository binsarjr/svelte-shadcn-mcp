{"title": "Basic Button Usage", "description": "Simple button implementation with different variants", "component": "Button", "code": "<script>\n  import { Button } from '$lib/components/ui/button';\n</script>\n\n<!-- Basic button -->\n<Button>Default Button</Button>\n\n<!-- Button variants -->\n<Button variant=\"secondary\">Secondary</Button>\n<Button variant=\"outline\">Outline</Button>\n<Button variant=\"ghost\">Ghost</Button>\n<Button variant=\"link\">Link</Button>\n<Button variant=\"destructive\">Destructive</Button>\n\n<!-- Button sizes -->\n<Button size=\"sm\">Small</Button>\n<Button size=\"default\">Default</Button>\n<Button size=\"lg\">Large</Button>", "category": "buttons", "tags": ["button", "variants", "basic"], "complexity": "basic", "dependencies": ["@/components/ui/button"]}
{"title": "Button with Icons", "description": "Buttons with icons using Lucide icons", "component": "Button", "code": "<script>\n  import { Button } from '$lib/components/ui/button';\n  import { ChevronRight, Download, Plus } from 'lucide-svelte';\n</script>\n\n<!-- Button with icon -->\n<Button>\n  <Plus class=\"mr-2 h-4 w-4\" />\n  Add Item\n</Button>\n\n<!-- Icon-only button -->\n<Button variant=\"outline\" size=\"icon\">\n  <Download class=\"h-4 w-4\" />\n</Button>\n\n<!-- Button with trailing icon -->\n<Button variant=\"ghost\">\n  Continue\n  <ChevronRight class=\"ml-2 h-4 w-4\" />\n</Button>", "category": "buttons", "tags": ["button", "icons", "lucide"], "complexity": "intermediate", "dependencies": ["@/components/ui/button", "lucide-svelte"]}
{"title": "Loading Button State", "description": "Button with loading state and disabled functionality", "component": "Button", "code": "<script>\n  import { Button } from '$lib/components/ui/button';\n  import { Loader2 } from 'lucide-svelte';\n  \n  let loading = false;\n  \n  async function handleSubmit() {\n    loading = true;\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    loading = false;\n  }\n</script>\n\n<!-- Loading button -->\n<Button on:click={handleSubmit} disabled={loading}>\n  {#if loading}\n    <Loader2 class=\"mr-2 h-4 w-4 animate-spin\" />\n    Loading...\n  {:else}\n    Submit\n  {/if}\n</Button>\n\n<!-- Alternative with bind -->\n<Button disabled={loading}>\n  {loading ? 'Processing...' : 'Process'}\n</Button>", "category": "buttons", "tags": ["button", "loading", "async", "state"], "complexity": "intermediate", "dependencies": ["@/components/ui/button", "lucide-svelte"]}
{"title": "Button Group Pattern", "description": "Group of related buttons with consistent spacing", "component": "Button", "code": "<script>\n  import { Button } from '$lib/components/ui/button';\n  import { Bold, Italic, Underline } from 'lucide-svelte';\n  \n  let activeFormats = new Set();\n  \n  function toggleFormat(format) {\n    if (activeFormats.has(format)) {\n      activeFormats.delete(format);\n    } else {\n      activeFormats.add(format);\n    }\n    activeFormats = activeFormats;\n  }\n</script>\n\n<!-- Button group -->\n<div class=\"flex rounded-md shadow-sm\" role=\"group\">\n  <Button \n    variant={activeFormats.has('bold') ? 'default' : 'outline'}\n    size=\"icon\"\n    class=\"rounded-r-none\"\n    on:click={() => toggleFormat('bold')}\n  >\n    <Bold class=\"h-4 w-4\" />\n  </Button>\n  <Button \n    variant={activeFormats.has('italic') ? 'default' : 'outline'}\n    size=\"icon\"\n    class=\"rounded-none border-l-0\"\n    on:click={() => toggleFormat('italic')}\n  >\n    <Italic class=\"h-4 w-4\" />\n  </Button>\n  <Button \n    variant={activeFormats.has('underline') ? 'default' : 'outline'}\n    size=\"icon\"\n    class=\"rounded-l-none border-l-0\"\n    on:click={() => toggleFormat('underline')}\n  >\n    <Underline class=\"h-4 w-4\" />\n  </Button>\n</div>", "category": "buttons", "tags": ["button", "group", "toggle", "toolbar"], "complexity": "advanced", "dependencies": ["@/components/ui/button", "lucide-svelte"]}